version: 2.1

jobs:
  deploy:
    docker:
      - image: cimg/aws:2023.04
    environment:
      TERRAFORM_STATE_BUCKET: "rearc-quest-terraform-state-0423"
    steps:
      - run:
          name: Validate required environment variables were set in CircleCI project configuration
          command: |
            [ -n "$AWS_ACCESS_KEY_ID" ] || (echo "ERROR: AWS_ACCESS_KEY_ID was not set in your CircleCI profile environment variables" && exit 1)
            [ -n "$AWS_SECRET_ACCESS_KEY" ] || (echo "ERROR: AWS_SECRET_ACCESS_KEY was not set in your CircleCI profile environment variables" && exit 1)
            [ -n "$AWS_REGION" ] || (echo "ERROR: AWS_REGION was not set in your CircleCI profile environment variables" && exit 1)
      - checkout
      - run:
          name: Install Terraform CLI
          command: |
            sudo apt-get update
            sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update
            sudo apt-get -y install terraform
            terraform --version
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
      - run:
          name: Deploy state architecture (terraform.tfstate bucket)
          command: |
            cd ~/project/.state/terraform
            if ! aws s3api head-bucket --bucket "$TERRAFORM_STATE_BUCKET" 2>/dev/null
            then
              terraform init
              terraform apply --auto-approve
            fi
      - run:
          name: Form and export variables to use in later steps
          command: |
            export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text | cat)
            export AWS_ECR_REPO_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            echo AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID
            echo AWS_ECR_REPO_URL=$AWS_ECR_REPO_URL
            echo IMAGE_NAME=$IMAGE_NAME
      - run:
          name: Apply Terraform service architecture
          command: |
            cd ~/project/.service/terraform
            terraform init -backend-config="region=$AWS_REGION"
            terraform apply -auto-approve
            IMAGE_NAME=$(terraform output -raw image_name)
            echo IMAGE_NAME=$IMAGE_NAME
            echo 'export IMAGE_NAME=$IMAGE_NAME' >> "$BASH_ENV"
            source $BASH_ENV
      - run:
          name: Build, tag, and push Docker image to ECR
          command: |
            docker build -t $IMAGE_NAME:latest .
            docker tag $IMAGE_NAME:latest $AWS_ECR_REPO_URL/$IMAGE_NAME:latest
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REPO_URL
            docker push $AWS_ECR_REPO_URL/$IMAGE_NAME:latest
      - run: 
          name: Force redeploy service
          command: |
            aws ecs update-service --cluster $(cd ~/project/.service/terraform && terraform output -raw ecs_cluster_name) --service $(cd .service/terraform && terraform output -raw ecs_service_name) --force-new-deployment

workflows:
  version: 2
  deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only: master